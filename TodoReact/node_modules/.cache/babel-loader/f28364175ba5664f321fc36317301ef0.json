{"ast":null,"code":"export const useApiClient = () => {\n  const baseUrl = \"https://localhost:7192/\";\n  const todoApriUrl = baseUrl + \"Todo\";\n\n  async function getTodos() {\n    let response;\n    response = await sendAnonymousRequest(\"GET\", todoApriUrl);\n    return response.status === 200 ? await response.body : null;\n  }\n\n  async function SendTodos() {\n    return ApiClient.sentHttpRequest(\"GET\", eventLogApiUrl + \"?\" + qs.stringify(props));\n  }\n\n  async function sentHttpRequest(verb, url, payload) {\n    var request = new Request(url, {\n      method: verb,\n      body: payload ? undefined : JSON.stringify(payload),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const fetchResponse = await fetch(request);\n    const response = {\n      body: await fetchResponse.json(),\n      ok: fetchResponse.ok,\n      status: fetchResponse.status\n    };\n\n    try {\n      if (!response.ok) {\n        if (response.status !== 422 && response.status !== 404) {\n          console.log(\"Error on api\");\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n\n    return response;\n  }\n\n  async function sendAnonymousRequest(verb, url, payload) {\n    let request = {\n      method: verb,\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"Client-Version\": \"v1\",\n        \"Access-Control-Allow-Origin\": '*',\n        \"Access-Control-Allow-Headers\": \"X-Requested-With\",\n        \"mode\": 'no-cors'\n      }\n    };\n    if (payload) request.body = JSON.stringify(payload);\n    const response = await fetch(url, request);\n    console.log(response);\n    return response;\n  }\n\n  return {\n    getTodos\n  };\n};","map":{"version":3,"sources":["C:/Dev/TTT/TodoWebAppReact/src/Services/api/apiClient.ts"],"names":["useApiClient","baseUrl","todoApriUrl","getTodos","response","sendAnonymousRequest","status","body","SendTodos","ApiClient","sentHttpRequest","eventLogApiUrl","qs","stringify","props","verb","url","payload","request","Request","method","undefined","JSON","headers","Accept","fetchResponse","fetch","json","ok","console","log","error"],"mappings":"AAgBA,OAAO,MAAMA,YAAY,GAAG,MAAM;AAE9B,QAAMC,OAAO,GAAG,yBAAhB;AACA,QAAMC,WAAW,GAAGD,OAAO,GAAG,MAA9B;;AAGA,iBAAeE,QAAf,GAA0B;AAEtB,QAAIC,QAAJ;AACAA,IAAAA,QAAQ,GAAG,MAAMC,oBAAoB,CAAC,KAAD,EAAQH,WAAR,CAArC;AACA,WAAOE,QAAQ,CAACE,MAAT,KAAoB,GAApB,GAA0B,MAAMF,QAAQ,CAACG,IAAzC,GAAgE,IAAvE;AACH;;AAED,iBAAeC,SAAf,GAA+D;AAC3D,WAAOC,SAAS,CAACC,eAAV,CACH,KADG,EAEHC,cAAc,GAAG,GAAjB,GAAuBC,EAAE,CAACC,SAAH,CAAaC,KAAb,CAFpB,CAAP;AAIH;;AAED,iBAAeJ,eAAf,CACIK,IADJ,EAEIC,GAFJ,EAGIC,OAHJ,EAI4B;AACxB,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,GAAZ,EAAiB;AAC3BI,MAAAA,MAAM,EAAEL,IADmB;AAE3BR,MAAAA,IAAI,EAAEU,OAAO,GAAGI,SAAH,GAAeC,IAAI,CAACT,SAAL,CAAeI,OAAf,CAFD;AAG3BM,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX;AAHkB,KAAjB,CAAd;AASA,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAACR,OAAD,CAAjC;AAEA,UAAMd,QAAQ,GAAG;AACbG,MAAAA,IAAI,EAAE,MAAMkB,aAAa,CAACE,IAAd,EADC;AAEbC,MAAAA,EAAE,EAAEH,aAAa,CAACG,EAFL;AAGbtB,MAAAA,MAAM,EAAEmB,aAAa,CAACnB;AAHT,KAAjB;;AAMA,QAAI;AACA,UAAI,CAACF,QAAQ,CAACwB,EAAd,EAAkB;AACd,YAAIxB,QAAQ,CAACE,MAAT,KAAoB,GAApB,IAA2BF,QAAQ,CAACE,MAAT,KAAoB,GAAnD,EAAwD;AACpDuB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ;AACJ,KAND,CAME,OAAOC,KAAP,EAAc;AACZ,YAAMA,KAAN;AACH;;AAED,WAAO3B,QAAP;AACH;;AAGD,iBAAeC,oBAAf,CACIU,IADJ,EAEIC,GAFJ,EAGIC,OAHJ,EAIE;AACE,QAAIC,OAAO,GAAG;AACVE,MAAAA,MAAM,EAAEL,IADE;AAEVQ,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB,kBAFX;AAGL,0BAAkB,IAHb;AAIL,uCAA+B,GAJ1B;AAKL,wCAAgC,kBAL3B;AAML,gBAAQ;AANH;AAFC,KAAd;AAYA,QAAIP,OAAJ,EAAaC,OAAO,CAACX,IAAR,GAAee,IAAI,CAACT,SAAL,CAAeI,OAAf,CAAf;AAEb,UAAMb,QAAQ,GAAG,MAAMsB,KAAK,CAACV,GAAD,EAAME,OAAN,CAA5B;AACAW,IAAAA,OAAO,CAACC,GAAR,CAAY1B,QAAZ;AACA,WAAOA,QAAP;AACH;;AAED,SAAO;AACHD,IAAAA;AADG,GAAP;AAGH,CAnFM","sourcesContent":["\r\ninterface TodoModel {\r\n    id: string;\r\n    dwsOrderStatus: string | null;\r\n    text: string | null;\r\n    completed: boolean | null;\r\n}\r\n\r\nexport interface HttpResponse<T> {\r\n    readonly ok: boolean;\r\n    readonly status: number;\r\n    readonly body: T | null;\r\n}\r\n\r\ndeclare const window: any;\r\n\r\nexport const useApiClient = () => {\r\n     \r\n    const baseUrl = \"https://localhost:7192/\";\r\n    const todoApriUrl = baseUrl + \"Todo\";\r\n\r\n\r\n    async function getTodos() {\r\n\r\n        let response: HttpResponse<TodoModel[]>;\r\n        response = await sendAnonymousRequest(\"GET\", todoApriUrl);\r\n        return response.status === 200 ? await response.body as TodoModel[]  : null;\r\n    }\r\n\r\n    async function SendTodos(): Promise<HttpResponse<TodoModel[]>> {\r\n        return ApiClient.sentHttpRequest<TodoModel[]>(\r\n            \"GET\",\r\n            eventLogApiUrl + \"?\" + qs.stringify(props)\r\n        );\r\n    }\r\n\r\n    async function sentHttpRequest<T>(\r\n        verb: string,\r\n        url: string,\r\n        payload?: any\r\n    ): Promise<HttpResponse<T>> {\r\n        var request = new Request(url, {\r\n            method: verb,\r\n            body: payload ? undefined : JSON.stringify(payload),\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        });\r\n\r\n        const fetchResponse = await fetch(request);\r\n\r\n        const response = {\r\n            body: await fetchResponse.json(),\r\n            ok: fetchResponse.ok,\r\n            status: fetchResponse.status,\r\n        } as HttpResponse<T>;\r\n\r\n        try {\r\n            if (!response.ok) {\r\n                if (response.status !== 422 && response.status !== 404) {\r\n                    console.log(\"Error on api\");\r\n                }\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n\r\n    async function sendAnonymousRequest(\r\n        verb: string,\r\n        url: string,\r\n        payload?: any\r\n    ) {\r\n        let request = {\r\n            method: verb,\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\",\r\n                \"Client-Version\": \"v1\",\r\n                \"Access-Control-Allow-Origin\": '*',\r\n                \"Access-Control-Allow-Headers\": \"X-Requested-With\",\r\n                \"mode\": 'no-cors'\r\n            },\r\n        } as any;\r\n     \r\n        if (payload) request.body = JSON.stringify(payload);\r\n\r\n        const response = await fetch(url, request);\r\n        console.log(response);\r\n        return response;\r\n    }\r\n\r\n    return {\r\n        getTodos\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}