{"ast":null,"code":"export const useApiClient = () => {\n  const baseUrl = \"https://localhost:7192/\";\n  const todoApriUrl = baseUrl + \"Todo\";\n\n  async function getTodos() {\n    return sentHttpRequest(\"GET\", todoApriUrl);\n  }\n\n  async function addTodos(text) {\n    return sentHttpRequest(\"POST\", `${todoApriUrl}?text=${text}`);\n  }\n\n  async function removeTodo(guid) {\n    console.log(guid);\n    return sentHttpRequest(\"DELETE\", `${todoApriUrl}/${guid}`);\n  }\n\n  async function sentHttpRequest(verb, url, payload) {\n    var request = new Request(url, {\n      method: verb,\n      body: payload ? undefined : JSON.stringify(payload),\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    const fetchResponse = await fetch(request);\n    const response = {\n      body: await fetchResponse.json(),\n      ok: fetchResponse.ok,\n      status: fetchResponse.status\n    };\n\n    try {\n      if (!response.ok) {\n        if (response.status !== 422 && response.status !== 404) {\n          console.log(\"Error on api\");\n        }\n      }\n    } catch (error) {\n      throw error;\n    }\n\n    return response;\n  }\n\n  return {\n    getTodos,\n    addTodos,\n    removeTodo\n  };\n};","map":{"version":3,"sources":["C:/Dev/Int/TodoWebAppReact/src/Services/api/apiClient.ts"],"names":["useApiClient","baseUrl","todoApriUrl","getTodos","sentHttpRequest","addTodos","text","removeTodo","guid","console","log","verb","url","payload","request","Request","method","body","undefined","JSON","stringify","headers","Accept","fetchResponse","fetch","response","json","ok","status","error"],"mappings":"AAQA,OAAO,MAAMA,YAAY,GAAG,MAAM;AAE9B,QAAMC,OAAO,GAAG,yBAAhB;AACA,QAAMC,WAAW,GAAGD,OAAO,GAAG,MAA9B;;AAGA,iBAAeE,QAAf,GAA8D;AAC1D,WAAOC,eAAe,CAClB,KADkB,EAElBF,WAFkB,CAAtB;AAIH;;AAED,iBAAeG,QAAf,CAAwBC,IAAxB,EAAwE;AAEpE,WAAOF,eAAe,CAClB,MADkB,EAEjB,GAAEF,WAAY,SAAQI,IAAK,EAFV,CAAtB;AAIH;;AAED,iBAAeC,UAAf,CAA0BC,IAA1B,EAAwC;AACpCC,IAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ;AACA,WAAOJ,eAAe,CAClB,QADkB,EAEjB,GAAEF,WAAY,IAAGM,IAAK,EAFL,CAAtB;AAIH;;AAED,iBAAeJ,eAAf,CACIO,IADJ,EAEIC,GAFJ,EAGIC,OAHJ,EAI4B;AACxB,QAAIC,OAAO,GAAG,IAAIC,OAAJ,CAAYH,GAAZ,EAAiB;AAC3BI,MAAAA,MAAM,EAAEL,IADmB;AAE3BM,MAAAA,IAAI,EAAEJ,OAAO,GAAGK,SAAH,GAAeC,IAAI,CAACC,SAAL,CAAeP,OAAf,CAFD;AAG3BQ,MAAAA,OAAO,EAAE;AACLC,QAAAA,MAAM,EAAE,kBADH;AAEL,wBAAgB;AAFX;AAHkB,KAAjB,CAAd;AASA,UAAMC,aAAa,GAAG,MAAMC,KAAK,CAACV,OAAD,CAAjC;AAEA,UAAMW,QAAQ,GAAG;AACbR,MAAAA,IAAI,EAAE,MAAMM,aAAa,CAACG,IAAd,EADC;AAEbC,MAAAA,EAAE,EAAEJ,aAAa,CAACI,EAFL;AAGbC,MAAAA,MAAM,EAAEL,aAAa,CAACK;AAHT,KAAjB;;AAMA,QAAI;AACA,UAAI,CAACH,QAAQ,CAACE,EAAd,EAAkB;AACd,YAAIF,QAAQ,CAACG,MAAT,KAAoB,GAApB,IAA2BH,QAAQ,CAACG,MAAT,KAAoB,GAAnD,EAAwD;AACpDnB,UAAAA,OAAO,CAACC,GAAR,CAAY,cAAZ;AACH;AACJ;AACJ,KAND,CAME,OAAOmB,KAAP,EAAc;AACZ,YAAMA,KAAN;AACH;;AAED,WAAOJ,QAAP;AACH;;AAED,SAAO;AACHtB,IAAAA,QADG;AAEHE,IAAAA,QAFG;AAGHE,IAAAA;AAHG,GAAP;AAKH,CArEM","sourcesContent":["import { TodoModel } from \"../../types/apiClient\";\r\n\r\nexport interface HttpResponse<T> {\r\n    readonly ok: boolean;\r\n    readonly status: number;\r\n    readonly body: T | null;\r\n}\r\n\r\nexport const useApiClient = () => {\r\n     \r\n    const baseUrl = \"https://localhost:7192/\";\r\n    const todoApriUrl = baseUrl + \"Todo\";\r\n\r\n\r\n    async function getTodos(): Promise<HttpResponse<TodoModel[]>> {\r\n        return sentHttpRequest<TodoModel[]>(\r\n            \"GET\",\r\n            todoApriUrl\r\n        );\r\n    }\r\n\r\n    async function addTodos(text: string): Promise<HttpResponse<TodoModel>> {\r\n\r\n        return sentHttpRequest(\r\n            \"POST\",\r\n            `${todoApriUrl}?text=${text}`\r\n        );\r\n    }\r\n\r\n    async function removeTodo(guid: string) {\r\n        console.log(guid);\r\n        return sentHttpRequest(\r\n            \"DELETE\",\r\n            `${todoApriUrl}/${guid}`\r\n        );\r\n    }\r\n\r\n    async function sentHttpRequest<T>(\r\n        verb: string,\r\n        url: string,\r\n        payload?: any\r\n    ): Promise<HttpResponse<T>> {\r\n        var request = new Request(url, {\r\n            method: verb,\r\n            body: payload ? undefined : JSON.stringify(payload),\r\n            headers: {\r\n                Accept: \"application/json\",\r\n                \"Content-Type\": \"application/json\"\r\n            },\r\n        });\r\n\r\n        const fetchResponse = await fetch(request);\r\n\r\n        const response = {\r\n            body: await fetchResponse.json(),\r\n            ok: fetchResponse.ok,\r\n            status: fetchResponse.status,\r\n        } as HttpResponse<T>;\r\n\r\n        try {\r\n            if (!response.ok) {\r\n                if (response.status !== 422 && response.status !== 404) {\r\n                    console.log(\"Error on api\");\r\n                }\r\n            }\r\n        } catch (error) {\r\n            throw error;\r\n        }\r\n\r\n        return response;\r\n    }\r\n\r\n    return {\r\n        getTodos,\r\n        addTodos,\r\n        removeTodo\r\n    };\r\n};\r\n"]},"metadata":{},"sourceType":"module"}