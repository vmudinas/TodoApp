[{"C:\\Dev\\Int\\TodoWebAppReact\\src\\index.tsx":"1","C:\\Dev\\Int\\TodoWebAppReact\\src\\reportWebVitals.ts":"2","C:\\Dev\\Int\\TodoWebAppReact\\src\\App.tsx":"3","C:\\Dev\\Int\\TodoWebAppReact\\src\\Services\\api\\apiClient.ts":"4"},{"size":500,"mtime":1643600940161,"results":"5","hashOfConfig":"6"},{"size":425,"mtime":1643600939968,"results":"7","hashOfConfig":"6"},{"size":3326,"mtime":1643619984768,"results":"8","hashOfConfig":"6"},{"size":1954,"mtime":1643619999275,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1el6nbl",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Dev\\Int\\TodoWebAppReact\\src\\index.tsx",[],[],"C:\\Dev\\Int\\TodoWebAppReact\\src\\reportWebVitals.ts",[],[],"C:\\Dev\\Int\\TodoWebAppReact\\src\\App.tsx",["23","24","25","26"],[],"import React from 'react';\nimport './App.css';\nimport { HttpResponse, useApiClient } from './Services/api/apiClient';\r\nimport { useEffect, useState } from 'react';\r\nimport { TodoModel } from './types/apiClient';\r\nimport { KeyboardEvent } from \"react\";\r\nimport { Button } from '@material-ui/core';\r\n\n function App() {\n\n     let todosApi = useApiClient();\n     const [todos, setTodos] = useState<TodoModel[]>([]);\n\n     const getTodos = async () => {\r\n         let response: HttpResponse<TodoModel[]>;\r\n\r\n         response = await todosApi.getTodos();\r\n         setTodos(response.body as TodoModel[]);      \r\n     };\n\n     const addTodos = async (text: string): Promise<HttpResponse<TodoModel>> => {\r\n         return (await todosApi.addTodos(text));\r\n     };\n\n     const removeTodo = async (guid: string) => {\r\n         await todosApi.removeTodo(guid);\r\n     };\n \r\n     useEffect(() => {\r\n         getTodos();\r\n     }, [])\n\r\n     const [inputValue, setInputValue] = useState(\"\");      \r\n\r\n    const handleInputChange = (e: { currentTarget: { value: React.SetStateAction<string>; }; }) => {\r\n        setInputValue(e.currentTarget.value);\r\n    }\r\n\r\n    const handleComplete = (e: { currentTarget: { getAttribute: (arg0: string) => any; }; }) => {\r\n        const index = e.currentTarget.getAttribute(\"data-index\");\r\n        const newTodos = [...todos];\r\n        newTodos[index].completed = !newTodos[index].completed;\r\n        setTodos(newTodos);\r\n    };\r\n\r\n    const handleRemove = (e: { stopPropagation: () => void; currentTarget: { getAttribute: (arg0: string) => any; }; }) => {\r\n        e.stopPropagation();\r\n        const index = e.currentTarget.getAttribute(\"data-index\");\r\n        var taskToDelete = todos[index];\r\n        const newTodos = [...todos];\r\n        newTodos.splice(index, 1);\r\n        setTodos(newTodos);\r\n        removeTodo(taskToDelete.id);\r\n    };\r\n\r\n     const handleSubmit = async (e: { preventDefault: () => void; }) => {\r\n            e.preventDefault();\r\n            if (!inputValue) return;\r\n         var addedTodo = await addTodos(inputValue);\r\n\r\n         const newTodos = [...todos];\r\n         if (addedTodo?.body) {\r\n             newTodos.push(addedTodo?.body);\r\n             setTodos(newTodos);\r\n             setInputValue('');\r\n         }\r\n    };\r\n\n    return (\r\n        <div className=\"contain\">\r\n            <form onSubmit={handleSubmit}>\r\n                <input\r\n                    type=\"text\"\r\n                    value={inputValue}\r\n                    onChange={handleInputChange}\r\n                />\r\n            </form>\r\n            <ul>                \r\n                {todos.map(({ text, completed, id }, i) => (\r\n                    <li\r\n                        aria-role=\"button\"\r\n                        className={completed ? 'complete' : \"\"}\r\n                        data-index={i}\r\n                        onClick={handleComplete}\r\n                    >\r\n                        <div>{text}</div>\r\n\r\n                        <button\r\n                            aria-label={`remove todo ${i}`}\r\n                            className=\"remove\"\r\n                            data-index={i}\r\n                            onClick={handleRemove}\r\n                        />\r\n                    </li>\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n}\n\nexport default App;\n","C:\\Dev\\Int\\TodoWebAppReact\\src\\Services\\api\\apiClient.ts",[],[],{"ruleId":"27","severity":1,"message":"28","line":6,"column":10,"nodeType":"29","messageId":"30","endLine":6,"endColumn":23},{"ruleId":"27","severity":1,"message":"31","line":7,"column":10,"nodeType":"29","messageId":"30","endLine":7,"endColumn":16},{"ruleId":"32","severity":1,"message":"33","line":31,"column":9,"nodeType":"34","endLine":31,"endColumn":11,"suggestions":"35"},{"ruleId":"36","severity":1,"message":"37","line":81,"column":25,"nodeType":"38","endLine":81,"endColumn":43},"@typescript-eslint/no-unused-vars","'KeyboardEvent' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getTodos'. Either include it or remove the dependency array.","ArrayExpression",["39"],"jsx-a11y/aria-props","aria-role: This attribute is an invalid ARIA attribute.","JSXAttribute",{"desc":"40","fix":"41"},"Update the dependencies array to be: [getTodos]",{"range":"42","text":"43"},[917,919],"[getTodos]"]